import React, {useState,useEffect, useRef} from 'react';
import style from "./../../assets/css/home.module.css"
import Sidebar from '../sidebar/sidebar'
import AddPhoto from '../addPhoto';
import axios from 'axios'
import ImagePreview from '../imagePreview';
import Delete from '../delete';
import { trusted } from 'mongoose';
import BigImage from '../big_image';






const Home = (props) =>{
    const {signOut, validate} = props  
    const[page , setPage] = useState('home')
    const[clicked, setCliced] = useState(false)
    const[addPhoto, setAddPhoto] = useState(false)
    const[view, setView] = useState(false)
    const [images, setImages] = useState(null)
    const [fetchDataMain, setfetchDataMain] = useState(false)
    const[visibal, setVisibal] = useState(false)
    const [id, setId] = useState(null)
    const [src, setSrc] = useState(null)
    const [title, setTitle] = useState(null)
    const [description, setDescription] = useState(null)
    const [isEdit, setIsEdit] = useState(false)
    const [isBigImage, setIsBigImage] = useState(false)
    const [blur,serBlur ] = useState(false)
    const [trash, setTrash] = useState(false)
    const [skip , setSkip] = useState(0)
    const [Useresponse , setResponse] = useState(null)
    const [temImageInfo , setTemImageInfo] = useState([])
    const divRef = useRef();



    const photoState = () =>{
        setAddPhoto(false)
        setIsBigImage(false)
        serBlur(false)
        fetchData()
    }
    useEffect(() =>{
        photoState()
    },[fetchDataMain])

    const trashPop = (id, title)=>{
        setTrash(true)
        serBlur(true)
        setId(id)
        setTitle(title)
    }

    const backTrash = (isFech) =>{
        setTrash(false)
        serBlur(false)
        if(isFech)   fetchData()

    }

const bigImage = (src, title , description, isEdit,id) =>{
        setSrc(src)
        setTitle(title)
        setDescription(description)
        setIsEdit(isEdit)
        setId(id)
        setIsBigImage(true)
        serBlur(true)


    }

    const homePageSwitcher = (page) =>{
        if(page != 'home') setCliced(true)
        setPage(page)
        
}

       
    

    const home = () =>{
        document.querySelector(`.${style.gallery}`).innerHTML = 'معرض الصور'
        setfetchDataMain(false)
       
    }

    const personal = () =>{
        document.querySelector(`.${style.gallery}`).innerHTML = 'صوري'
        setfetchDataMain(true)
        


    }
    
    useEffect(() => {
        let gallery = document.querySelector(`.${style.gallery}`)
        setSkip(0)
        setImages(null)
    switch(page){
        case 'home':
            home()
            gallery.style.transition = 'null'
            if(clicked)gallery.style.left = '13vw'
            break;
        case 'personal':
            personal()
            gallery.style.transition = 'null'
            gallery.style.left = '17vw'
            break;
        case 'signOut':
            break
    }
        },[page])

        useEffect(() => {
            fetchData();
        },[])
        
        const fetchData = async () => {
            try {
                        setVisibal(false)

                let response
                if(fetchDataMain){
                
                     response = await axios.get("http://localhost:4000/api/photos/myPhotos")
                }else{
                    const id = localStorage.getItem('id')
                    response = await axios.get("http://localhost:4000/api/photos/allPhotos",{
                        params:{
                            id: id,
                            skip: skip
                        }
                     })
                }

                  if(response.data.done) return
                 
                  if(response.data.imageInfo.length != 0){
                   setView(true);
                  setImages(response.data)
                  setResponse(response.data)
                  setSkip(temImageInfo.length)
                  console.log(skip)
                  console.log(temImageInfo)
                  }

                  else {
                    setView(false)
                }

                   // اظهار اعدادات المسؤول
                    if(page =='personal' && localStorage?.getItem("name")){
                        setVisibal(true)
                    }else{
                        setVisibal(false)
                    }
            } catch (e) {
                validate(e.response.data.massage)
                homePageSwitcher('home')

            }
        };
        useEffect(() =>{
            if (!Useresponse) return;
            setTemImageInfo(temImageInfo.concat( temImageInfo, Useresponse.imageInfo))
        },[Useresponse])

    const mousePointing = (e) =>{
        let gallery = document.querySelector(`.${style.gallery}`)
        gallery.style.transition = '0.3s ease'
        if(e) {
            document.querySelector(`.${style.HomeDiv}`).style.width = '81.5%'
            if( page == 'personal'){
                document.querySelector(`.${style.gallery}`).style.left = '17vw'
            }else if( page == 'home'){
                document.querySelector(`.${style.gallery}`).style.left = '13vw'
            }
        }else {
            document.querySelector(`.${style.HomeDiv}`).style.width = '89%'
            if( page == 'personal'){
                document.querySelector(`.${style.gallery}`).style.left = '24vw'
            }else if( page == 'home'){
                document.querySelector(`.${style.gallery}`).style.left = '20vw'
            };
                }
       
        

    }

    const handleScroll = () => {
        if (divRef.current) {
            const { scrollTop, scrollHeight, clientHeight } = divRef.current;
            if (scrollTop + clientHeight >= scrollHeight - 36 ) {
               fetchData();
            }
        }
    };


    

    return(
        <div className={style.bigBox}>
            <div className={style.topBar}>
            <h1 className={style.gallery} >معرض الصور</h1>
            <div className={style.addPhoto}>
            <button className={style.button} onClick={() => {
                setAddPhoto(true)
                setIsBigImage(false)
            }
                } type="button">
            <span className={`${style.button__text}${style.bold}`}>إضافة صورة</span>
            <span className={style.button__icon}><svg className={style.svg} fill="none" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><line x1="12" x2="12" y1="5" y2="19"></line><line x1="5" x2="19" y1="12" y2="12"></line></svg></span>
            </button>
            </div>
            </div>
            <div className={style.HomeDiv} ref={divRef} onScroll={handleScroll}>
                {trash && <Delete backTrash={backTrash} validate={validate} ImagePreviews ={images.imagePreviews} id={id} title={title}/>}
                {isBigImage  && <BigImage id={id}src={src} title={title} isEdit = {isEdit} photoState={photoState} description ={description} validate ={validate} />}
                {addPhoto ? <AddPhoto photoState={photoState} validate ={validate} /> :  <ImagePreview  trashPop = {trashPop}blur ={blur}bigImageFun={bigImage} view = {view} images = {images} visibal={visibal} validate={validate}   fetchData={fetchData}/> }
            </div>
            <Sidebar mousePointing ={mousePointing} signOut = {signOut} clicked = {clicked} homePageSwitcher = {homePageSwitcher}/>
        </div>
    )
}


export default Home
























































import React, {useState,useEffect} from 'react';
import style from "./../../assets/css/home.module.css"
import Sidebar from '../sidebar/sidebar'
import AddPhoto from '../addPhoto';
import axios from 'axios'
import ImagePreview from '../imagePreview';
import Delete from '../delete';
import { trusted } from 'mongoose';
import BigImage from '../big_image';






const Home = (props) =>{
    const {signOut, validate} = props  
    const[page , setPage] = useState('home')
    const[clicked, setCliced] = useState(false)
    const[addPhoto, setAddPhoto] = useState(false)
    const[view, setView] = useState(false)
    const [images, setImages] = useState(null)
    const [fetchDataMain, setfetchDataMain] = useState(false)
    const[visibal, setVisibal] = useState(false)
    const [id, setId] = useState(null)
    const [src, setSrc] = useState(null)
    const [title, setTitle] = useState(null)
    const [description, setDescription] = useState(null)
    const [isEdit, setIsEdit] = useState(false)
    const [isBigImage, setIsBigImage] = useState(false)
    const [blur,serBlur ] = useState(false)
    const [trash, setTrash] = useState(false)


    const photoState = () =>{
        setAddPhoto(false)
        setIsBigImage(false)
        serBlur(false)
        fetchData()
    }
    useEffect(() =>{
        photoState()
    },[fetchDataMain])

    const trashPop = (id, title)=>{
        setTrash(true)
        serBlur(true)
        setId(id)
        setTitle(title)
    }

    const backTrash = (isFech) =>{
        setTrash(false)
        serBlur(false)
        if(isFech)   fetchData()

    }

const bigImage = (src, title , description, isEdit,id) =>{
        setSrc(src)
        setTitle(title)
        setDescription(description)
        setIsEdit(isEdit)
        setId(id)
        setIsBigImage(true)
        serBlur(true)


    }

    const homePageSwitcher = (page) =>{
        if(page != 'home') setCliced(true)
        setPage(page)
        
}

       
    

    const home = () =>{
        document.querySelector(`.${style.gallery}`).innerHTML = 'معرض الصور'
        setfetchDataMain(false)
       
    }

    const personal = () =>{
        document.querySelector(`.${style.gallery}`).innerHTML = 'صوري'
        setfetchDataMain(true)
        


    }
    
    useEffect(() => {
        let gallery = document.querySelector(`.${style.gallery}`)
    switch(page){
        case 'home':
            home()
            gallery.style.transition = 'null'
            if(clicked)gallery.style.left = '13vw'
            break;
        case 'personal':
            personal()
            gallery.style.transition = 'null'
            gallery.style.left = '17vw'
            break;
        case 'signOut':
            break
    }
        },[page])

        useEffect(() => {
            fetchData();
        },[])
        
        const fetchData = async () => {
            try {
                        setVisibal(false)

                let response
                console.log(fetchDataMain)
                if(fetchDataMain){
                
                     response = await axios.get("http://localhost:4000/api/photos/myPhotos")
                }else{
                    const id = localStorage.getItem('id')
                    console.log(id)
                    response = await axios.get("http://localhost:4000/api/photos/allPhotos",{
                        params:{
                            id: id
                        }
                     })
                }
                
                 
                  console.log(1)
                  setImages(response.data);
                  console.log(2)

                  if(response.data.imageInfo.length != 0) setView(true);


                  else setView(false)

                   // اظهار اعدادات المسؤول
                    if(page =='personal' && localStorage?.getItem("name")){
                        setVisibal(true)
                    }else{
                        setVisibal(false)
                    }
            } catch (e) {
                validate(e.response.data.massage)
                homePageSwitcher('home')

            }
        };
    

    const mousePointing = (e) =>{
        let gallery = document.querySelector(`.${style.gallery}`)
        gallery.style.transition = '0.3s ease'
        if(e) {
            document.querySelector(`.${style.HomeDiv}`).style.width = '81.5%'
            if( page == 'personal'){
                document.querySelector(`.${style.gallery}`).style.left = '17vw'
            }else if( page == 'home'){
                document.querySelector(`.${style.gallery}`).style.left = '13vw'
            }
        }else {
            document.querySelector(`.${style.HomeDiv}`).style.width = '89%'
            if( page == 'personal'){
                document.querySelector(`.${style.gallery}`).style.left = '24vw'
            }else if( page == 'home'){
                document.querySelector(`.${style.gallery}`).style.left = '20vw'
            };
                }
       
        

    }

    

    return(
        <div className={style.bigBox}>
            <div className={style.topBar}>
            <h1 className={style.gallery} >معرض الصور</h1>
            <div className={style.addPhoto}>
            <button className={style.button} onClick={() => {
                setAddPhoto(true)
                setIsBigImage(false)
            }
                } type="button">
            <span className={`${style.button__text}${style.bold}`}>إضافة صورة</span>
            <span className={style.button__icon}><svg className={style.svg} fill="none" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><line x1="12" x2="12" y1="5" y2="19"></line><line x1="5" x2="19" y1="12" y2="12"></line></svg></span>
            </button>
            </div>
            </div>
            <div className={style.HomeDiv}>
                {trash && <Delete backTrash={backTrash} validate={validate} ImagePreviews ={images.imagePreviews} id={id} title={title}/>}
                {isBigImage  && <BigImage id={id}src={src} title={title} isEdit = {isEdit} photoState={photoState} description ={description} validate ={validate} />}
                {addPhoto ? <AddPhoto photoState={photoState} validate ={validate} /> :  <ImagePreview  trashPop = {trashPop}blur ={blur}bigImageFun={bigImage} view = {view} images = {images} visibal={visibal} validate={validate}   fetchData={fetchData}/> }
            </div>
            <Sidebar mousePointing ={mousePointing} signOut = {signOut} clicked = {clicked} homePageSwitcher = {homePageSwitcher}/>
        </div>
    )
}


export default Home



























































const jwtHelpers = require('../utils/jwtHelpers')
const Likes = require('../module/likes')
const Photos = require('../module/photos')
const path = require("path")
const fs = require("fs")


exports.upload = async (req, res)=>{
    if (!req.files || Object.keys(req.files).length === 0) {
        return res.status(400).json({massage:'لم يتم تحميل أي صورة.'});
    }

    // استقبال الصورة من الطلب
    const image = req.files.image;
    
    const {title, description} = req.body
    if(!title || !description) return res.status(401).json({massage: "يرجى أضافة عنوان و وصف للصورة"});
    if(title.length > 16 || description > 80) return res.status(401).json({massage: "أحرف العنوان يجب أن لا تزيد عن 16 و الوصف لا يزيد عن 80"});
    let extname , photo;
    try{
     photo = await Photos({
        title: title,
        description: description,
        user: req.userId
    })
    await photo.save()
     extname = path.extname(image.name)
    }catch(e){
        res.status(500).json({massage: e})
    }

    if (extname != '.jpeg' && extname != '.png' ){
        return res.status(415).json(
            {massage: `لا تقبل إلا ملفات من صيغة .png و .jpeg صيغة الملف المرسل هوا ${extname}`}
            );
    }
    const uploadPath = path.join(__dirname, '..', 'photosStore');
    // حفظ الصورة في المسار المحدد على الخادم
    image.mv(path.join(uploadPath, photo.id + extname), (err) => {
        if (err) {
            return res.status(500).json(
                {massage:err}
                );
        }

        res.status(200).json({massage:'تم تحميل الصورة بنجاح.'});
    });

}



exports.allPhotos = async(req,res)=>{
    const id = req.query.id
    try{
    const allPhotos = await Photos.find();
    const likedPhoto = await Likes.find().where('user').equals(id).exec()
    const imagePath = path.join(__dirname, '..','photosStore'); 
    const imageFiles = fs.readdirSync(imagePath);
    const imagePreviews = [];
    
    // قراءة محتوى كل ملف صورة وتحويله إلى base64
    imageFiles.forEach(file => {
        const filePath = path.join(imagePath, file);
        const imageContent = fs.readFileSync(filePath, { encoding: 'base64' });

        // إضافة عرض الصور للقائمة
        imagePreviews.push({
            name: file,
            data: imageContent
        });
    });
    res.status(200).json({imageInfo: allPhotos, liked: likedPhoto, imagePreviews: imagePreviews});
    }catch(e){
        return res.status(500).json({massage:"!حدثت مشكلة في التحميل"}) 
    }

    
}

exports.myPhotos = async(req,res)=>{
    try{
    const allPhotos = await Photos.find().where('user').equals(req.userId).exec();
    const likedPhoto = await Likes.find().select('-_id').where('user').equals(req.userId).exec()
    const imagePath = path.join(__dirname, '..','photosStore'); 
    const imageFiles = fs.readdirSync(imagePath);
    const imagePreviews = [];
    
    // قراءة محتوى كل ملف صورة وتحويله إلى base64
    imageFiles.forEach(file => {
        const filePath = path.join(imagePath, file);
        const imageContent = fs.readFileSync(filePath, { encoding: 'base64' });

        // إضافة عرض الصور للقائمة
        imagePreviews.push({
            name: file,
            data: imageContent
        });
    });
    res.status(200).json({imageInfo: allPhotos, liked: likedPhoto, imagePreviews: imagePreviews});
    }catch(e){
        return res.status(500).json({massage:"!حدثت مشكلة في التحميل"}) 
    }

    
}


exports.delete = async(req,res)=>{
    const {imageId, imageName } = req.query
    console.log(imageName)
    const image = await Photos.findById(imageId)
    if(req.userId == image?.user){

        const uploadPath = path.join(__dirname, '..', 'photosStore');
         fs.unlink(path.join(uploadPath, imageName), (err) => {
            if (err) {
                return res.status(500).json({massage: err})
            }
          });
        await image.deleteOne()
        return res.status(200).json({massage: true})
    }
    return res.status(401).json({massage: "يجب أن تكون أنت مرسل الصوره لكي تحذفها"})

}


exports.modify = async (req,res)=>{
    const {title , description, imageId } = req.body
    if(title.length > 16 || description > 80) return res.status(401).json({massage: "أحرف العنوان يجب أن لا تزيد عن 16 و الوصف لا يزيد عن 80"});
    try{
    const image = await Photos.findById(imageId)
    if(req.userId == image?.user){
        image.title = title
        image.description = description
        image.save()
        return res.status(200).json({massage: true})
    }
    return res.status(401).json({massage: "يجب أن تكون أنت من أرسل الصوره لكي تستطيع التعديل عليها"})

}catch(e){
    return res.status(500).json({massage: "!!حدث خطأ"})
}
}

exports.like = async (req, res)=>{
    const {imageId} = req.body
    try{
    const liked = await Likes.findOne()
    .where('user').equals(req.userId)
    .where('photo').equals(imageId)
    .exec()
    let likeCounter = await Photos.findById(imageId)
    if(liked) {
        await liked.deleteOne();

        try{
            likeCounter.likes =  parseInt(likeCounter.likes) - 1

            await likeCounter.save()
        }catch(e){
            return res.status(500).json({massage:'1' + e});
        }


        return res.status(200).json({massage:true , likeSituation: 'unlike'});
    }
    else{
    const liking = await Likes({
        user: req.userId,
        photo: imageId
    })
    liking.save()

    try{
        likeCounter.likes =  parseInt(likeCounter.likes) + 1
        await likeCounter.save()
    }catch(e){
        return res.status(500).json({massage:'2' + e});
    }


    return res.status(200).json({massage:true  , likeSituation: 'like'});

    }
    }catch(e){
        return res.status(500).json({massage:'3' + e});
    }

    

}


